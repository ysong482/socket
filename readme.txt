My program can be run without error in Ubuntu 18.04, but some errors may occur on the end server on Ubuntu 16.04. The socket function is working well.
Client program: In my program, I collect the input value as a string value, and combine them into a large string with space. For example, the user id is 23, and the country name is XyZ. My large string with space will be “XyZ 23”. Transfer this string into char[] and send it to the Main server. The print message will be edited by the main server and end server. The client program only needs to put the char[] on the screen.
Main server program: when I boot up my main problem, my main server program will send a request to the end server to request the country list. The country list will be stored as a long string with space. For example, ”XyZ aaa fqewA”. The request is also a string with space ”REQUEST LIST”. Due to the client only sends one string and one int. The end server will easily distinguish the request for the country list from the main server with the client request. When the client sends the request “XyZ 23”, this request will break into pieces and stored in a vector(res). Res[0] is XyZ and res[1] is 23. Res[0] will be sent to a function to find whether it appears in the country list string. If it appears in the country list string from end server A, the client request string “XyZ 23” will be sent to end server A. If it appears in the list from B, the request will be sent to end server B. if we cannot find a country in both, we will send a message to the client “country not found”. When the main server received the answer from the end server, it will send back to the client directly.
End server: after it boots up, it will read the data. The country name is a string and user id is int. they will be distinguished by the function. The user id was input line by line. When we got the country name, we will store the country name in a map, when the client request to search this map, it will return the index of the matrix we create latterly. The unordered map of the country will be Xyz:0 aaa:1 fqewA:2. When we received the client request “XyZ 23”, it will search the matrix 0. When a file in data by user line. We will create a map to store the user and put it into the matrix. The user index will be stored in an unordered map, and it will correspond to the row and column of the matrix. Matrix is a class it contains some function. For example, addvertex(char xxx)is to add one column and one row in the matrix. Addedge(I,j) is set matrix[i][j] and matrix[j][i] to 1. It will automatically filter the redundancy value. When we research user id, we will first search the unordered map for the index of the matrix. Then we need to search the matrix for the most common neighbors. Matrix function searchMatrix will count the greatest number of common neighbors and the index of this neighbor. Then we need to go back to the user map and transverse the whole map to get the user id by index. There are three situations. If the count of common is zero, it will return send “already have all”, if we got the user id and number of common neighbors, we will edit the answer and send it to the main server. If the user id is not on the map, will return the user not found.
